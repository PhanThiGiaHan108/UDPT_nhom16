import crypto from "crypto";
import Payment from "../models/Payment.js";

/**
 * üéØ T·∫†O LINK THANH TO√ÅN PAYOS
 * POST /api/payment/payos/create
 */
export async function createPayOSPayment(req, res) {
  try {
    const { amount, courseId } = req.body;

    // ‚úÖ L·∫•y userId t·ª´ JWT token (req.user ƒë∆∞·ª£c set b·ªüi middleware)
    const userId = req.user?.id || req.user?._id;

    // ‚úÖ Validate input
    if (!courseId || !userId) {
      return res.status(400).json({
        success: false,
        message: "courseId v√† userId l√† b·∫Øt bu·ªôc",
      });
    }

    // ‚úÖ L·∫•y th√¥ng tin PayOS t·ª´ env
    const PAYOS_CLIENT_ID = process.env.PAYOS_CLIENT_ID;
    const PAYOS_API_KEY = process.env.PAYOS_API_KEY;
    const PAYOS_CHECKSUM_KEY = process.env.PAYOS_CHECKSUM_KEY;

    if (!PAYOS_CLIENT_ID || !PAYOS_API_KEY || !PAYOS_CHECKSUM_KEY) {
      return res.status(500).json({
        success: false,
        message: "PayOS ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng ki·ªÉm tra .env",
      });
    }

    // ‚úÖ L·∫•y th√¥ng tin kh√≥a h·ªçc t·ª´ course-service
    const courseRes = await fetch(
      `http://localhost:5002/api/courses/${courseId}`
    );
    if (!courseRes.ok) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc",
      });
    }
    const course = await courseRes.json();

    // Note: Kh√¥ng c·∫ßn ki·ªÉm tra user v√¨ ƒë√£ c√≥ JWT token
    if (!userId) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng",
      });
    }

    // ‚úÖ T·∫°o transaction ID duy nh·∫•t
    const transactionId = `TXN${Date.now()}${Math.random()
      .toString(36)
      .substr(2, 9)
      .toUpperCase()}`;

    const paymentAmount = amount || course.price;
    const orderCode = Date.now(); // Unique order code

    // ‚úÖ M√¥ t·∫£ theo y√™u c·∫ßu: <idH·ªçcVi√™n>_<idKh√≥aH·ªçc>
    // Nh∆∞ng PayOS gi·ªõi h·∫°n 25 k√Ω t·ª± ‚áí d√πng 10 k√Ω t·ª± cu·ªëi m·ªói id: 10 + 1 + 10 = 21
    // V√≠ d·ª•: <...last10>_<...last10>
    const shortUser = String(userId).slice(-10).toUpperCase();
    const shortCourse = String(courseId).slice(-10).toUpperCase();
    // D√πng k√Ω t·ª± ch·ªØ c√°i thay cho d·∫•u ph√¢n c√°ch ƒë·ªÉ ph√π h·ª£p quy t·∫Øc hi·ªÉn th·ªã c·ªßa PayOS
    // V√≠ d·ª•: UABCDEF1234C9876543210 (<= 1+10+1+10 = 22)
    const description = `U${shortUser}C${shortCourse}`; // ch·ªâ A-Z0-9

    // ‚úÖ L∆∞u payment v√†o database TR∆Ø·ªöC
    const payment = new Payment({
      userId,
      courseId,
      amount: paymentAmount,
      paymentMethod: "payos",
      status: "pending",
      transactionId,
      paymentDetails: {
        orderCode: orderCode.toString(),
        paymentLinkId: "", // S·∫Ω c·∫≠p nh·∫≠t sau khi t·∫°o link
      },
      expiresAt: new Date(Date.now() + 5 * 60 * 1000), // H·∫øt h·∫°n sau 5 ph√∫t
      note: `${transactionId} - ${course.title} - ${userId}_${courseId}`, // l∆∞u mapping ƒë·∫ßy ƒë·ªß trong note
    });

    await payment.save();

    // ‚úÖ T·∫°o payment link v·ªõi PayOS API
    const payosData = {
      orderCode: orderCode,
      amount: paymentAmount,
      description: description,
      returnUrl: `${
        process.env.FRONTEND_URL || "http://localhost:3000"
      }/payment-success?paymentId=${payment._id}`,
      cancelUrl: `${
        process.env.FRONTEND_URL || "http://localhost:3000"
      }/payment-cancel?paymentId=${payment._id}`,
    };

    // ‚úÖ T·∫°o checksum (signature) cho request
    const dataStr = `amount=${payosData.amount}&cancelUrl=${payosData.cancelUrl}&description=${payosData.description}&orderCode=${payosData.orderCode}&returnUrl=${payosData.returnUrl}`;
    const signature = crypto
      .createHmac("sha256", PAYOS_CHECKSUM_KEY)
      .update(dataStr)
      .digest("hex");

    // ‚úÖ G·ªçi PayOS API
    try {
      const response = await fetch(
        "https://api-merchant.payos.vn/v2/payment-requests",
        {
          method: "POST",
          headers: {
            "x-client-id": PAYOS_CLIENT_ID,
            "x-api-key": PAYOS_API_KEY,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            ...payosData,
            signature: signature,
          }),
        }
      );

      const result = await response.json();

      if (!response.ok || result.code !== "00") {
        console.error("‚ùå PayOS API Error:", result);

        // X√≥a payment n·∫øu t·∫°o link th·∫•t b·∫°i
        await Payment.findByIdAndDelete(payment._id);

        return res.status(400).json({
          success: false,
          message: result.desc || "Kh√¥ng th·ªÉ t·∫°o link thanh to√°n PayOS",
          error: result,
        });
      }

      // ‚úÖ C·∫≠p nh·∫≠t payment v·ªõi th√¥ng tin t·ª´ PayOS
      payment.paymentDetails.paymentLinkId = result.data.paymentLinkId;
      await payment.save();

      // ‚úÖ Tr·∫£ v·ªÅ th√¥ng tin cho Frontend
      return res.json({
        success: true,
        paymentId: payment._id,
        transactionId,
        checkoutUrl: result.data.checkoutUrl,
        qrCode: result.data.qrCode,
        amount: paymentAmount,
        orderCode: orderCode,
        description,
        expiresAt: payment.expiresAt,
        courseTitle: course.title,
      });
    } catch (apiError) {
      console.error("‚ùå PayOS API call failed:", apiError);

      // X√≥a payment n·∫øu t·∫°o link th·∫•t b·∫°i
      await Payment.findByIdAndDelete(payment._id);

      return res.status(500).json({
        success: false,
        message: "Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi PayOS API",
        error: apiError.message,
      });
    }
  } catch (error) {
    console.error("‚ùå PayOS createPayment error:", error);
    return res.status(500).json({
      success: false,
      message: "Kh√¥ng th·ªÉ t·∫°o thanh to√°n PayOS",
      error: error.message,
    });
  }
}

/**
 * üîç KI·ªÇM TRA TR·∫†NG TH√ÅI THANH TO√ÅN PAYOS
 * GET /api/payment/payos/status?orderCode=xxx
 */
export async function checkPayOSPaymentStatus(req, res) {
  try {
    const { orderCode } = req.query;

    if (!orderCode) {
      return res.status(400).json({
        success: false,
        message: "C·∫ßn cung c·∫•p orderCode",
      });
    }

    const PAYOS_CLIENT_ID = process.env.PAYOS_CLIENT_ID;
    const PAYOS_API_KEY = process.env.PAYOS_API_KEY;

    // ‚úÖ G·ªçi PayOS API ƒë·ªÉ check status
    const response = await fetch(
      `https://api-merchant.payos.vn/v2/payment-requests/${orderCode}`,
      {
        method: "GET",
        headers: {
          "x-client-id": PAYOS_CLIENT_ID,
          "x-api-key": PAYOS_API_KEY,
        },
      }
    );

    const result = await response.json();

    if (!response.ok) {
      return res.status(400).json({
        success: false,
        message: "Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i thanh to√°n",
        error: result,
      });
    }

    return res.json({
      success: true,
      status: result.data.status,
      data: result.data,
    });
  } catch (error) {
    console.error("‚ùå Check PayOS status error:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói ki·ªÉm tra tr·∫°ng th√°i thanh to√°n",
      error: error.message,
    });
  }
}

/**
 * ‚ùå H·ª¶Y THANH TO√ÅN PAYOS
 * POST /api/payment/payos/cancel
 */
export async function cancelPayOSPayment(req, res) {
  try {
    const { orderCode, reason } = req.body;

    if (!orderCode) {
      return res.status(400).json({
        success: false,
        message: "C·∫ßn cung c·∫•p orderCode",
      });
    }

    const PAYOS_CLIENT_ID = process.env.PAYOS_CLIENT_ID;
    const PAYOS_API_KEY = process.env.PAYOS_API_KEY;

    // ‚úÖ G·ªçi PayOS API ƒë·ªÉ cancel
    const response = await fetch(
      `https://api-merchant.payos.vn/v2/payment-requests/${orderCode}/cancel`,
      {
        method: "POST",
        headers: {
          "x-client-id": PAYOS_CLIENT_ID,
          "x-api-key": PAYOS_API_KEY,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          cancellationReason: reason || "User cancelled",
        }),
      }
    );

    const result = await response.json();

    // ‚úÖ C·∫≠p nh·∫≠t payment trong database
    const payment = await Payment.findOne({
      "paymentDetails.orderCode": orderCode.toString(),
    });

    if (payment) {
      payment.status = "cancelled";
      payment.note = `${payment.note || ""} | Cancelled: ${
        reason || "User cancelled"
      }`;
      await payment.save();
    }

    return res.json({
      success: true,
      message: "ƒê√£ h·ªßy thanh to√°n",
      result: result,
    });
  } catch (error) {
    console.error("‚ùå Cancel PayOS payment error:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói h·ªßy thanh to√°n",
      error: error.message,
    });
  }
}
